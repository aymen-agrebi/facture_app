/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Facture } from "./Facture";
import { FactureCountArgs } from "./FactureCountArgs";
import { FactureFindManyArgs } from "./FactureFindManyArgs";
import { FactureFindUniqueArgs } from "./FactureFindUniqueArgs";
import { CreateFactureArgs } from "./CreateFactureArgs";
import { UpdateFactureArgs } from "./UpdateFactureArgs";
import { DeleteFactureArgs } from "./DeleteFactureArgs";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { Company } from "../../company/base/Company";
import { User } from "../../user/base/User";
import { FactureService } from "../facture.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Facture)
export class FactureResolverBase {
  constructor(
    protected readonly service: FactureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Facture",
    action: "read",
    possession: "any",
  })
  async _facturesMeta(
    @graphql.Args() args: FactureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Facture])
  @nestAccessControl.UseRoles({
    resource: "Facture",
    action: "read",
    possession: "any",
  })
  async factures(
    @graphql.Args() args: FactureFindManyArgs
  ): Promise<Facture[]> {
    return this.service.factures(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Facture, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Facture",
    action: "read",
    possession: "own",
  })
  async facture(
    @graphql.Args() args: FactureFindUniqueArgs
  ): Promise<Facture | null> {
    const result = await this.service.facture(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Facture)
  @nestAccessControl.UseRoles({
    resource: "Facture",
    action: "create",
    possession: "any",
  })
  async createFacture(
    @graphql.Args() args: CreateFactureArgs
  ): Promise<Facture> {
    return await this.service.createFacture({
      ...args,
      data: {
        ...args.data,

        companies: args.data.companies
          ? {
              connect: args.data.companies,
            }
          : undefined,

        users: args.data.users
          ? {
              connect: args.data.users,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Facture)
  @nestAccessControl.UseRoles({
    resource: "Facture",
    action: "update",
    possession: "any",
  })
  async updateFacture(
    @graphql.Args() args: UpdateFactureArgs
  ): Promise<Facture | null> {
    try {
      return await this.service.updateFacture({
        ...args,
        data: {
          ...args.data,

          companies: args.data.companies
            ? {
                connect: args.data.companies,
              }
            : undefined,

          users: args.data.users
            ? {
                connect: args.data.users,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Facture)
  @nestAccessControl.UseRoles({
    resource: "Facture",
    action: "delete",
    possession: "any",
  })
  async deleteFacture(
    @graphql.Args() args: DeleteFactureArgs
  ): Promise<Facture | null> {
    try {
      return await this.service.deleteFacture(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product], { name: "product" })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async findProduct(
    @graphql.Parent() parent: Facture,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProduct(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "companies",
  })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  async getCompanies(
    @graphql.Parent() parent: Facture
  ): Promise<Company | null> {
    const result = await this.service.getCompanies(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUsers(@graphql.Parent() parent: Facture): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
